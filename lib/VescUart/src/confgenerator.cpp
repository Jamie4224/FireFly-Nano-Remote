#include "confgenerator.h"

int32_t confgenerator_serialize_mcconf(uint8_t *buffer, const mc_configuration *conf) {
	int32_t ind = 0;

	buffer_append_uint32(buffer, conf->mcconf_signature, &ind);

	buffer[ind++] = conf->pwm_mode;
	buffer[ind++] = conf->comm_mode;
	buffer[ind++] = conf->motor_type;
	buffer[ind++] = conf->sensor_mode;
	buffer_append_float32_auto(buffer, conf->l_current_max, &ind);
	buffer_append_float32_auto(buffer, conf->l_current_min, &ind);
	buffer_append_float32_auto(buffer, conf->l_in_current_max, &ind);
	buffer_append_float32_auto(buffer, conf->l_in_current_min, &ind);
	buffer_append_float32_auto(buffer, conf->l_abs_current_max, &ind);
	buffer_append_float32_auto(buffer, conf->l_min_erpm, &ind);
	buffer_append_float32_auto(buffer, conf->l_max_erpm, &ind);
	buffer_append_float32_auto(buffer, conf->l_erpm_start, &ind);
	buffer_append_float32_auto(buffer, conf->l_max_erpm_fbrake, &ind);
	buffer_append_float32_auto(buffer, conf->l_max_erpm_fbrake_cc, &ind);
	buffer_append_float32_auto(buffer, conf->l_min_vin, &ind);
	buffer_append_float32_auto(buffer, conf->l_max_vin, &ind);
	buffer_append_float32_auto(buffer, conf->l_battery_cut_start, &ind);
	buffer_append_float32_auto(buffer, conf->l_battery_cut_end, &ind);
	buffer[ind++] = conf->l_slow_abs_current;
	buffer_append_float32_auto(buffer, conf->l_temp_fet_start, &ind);
	buffer_append_float32_auto(buffer, conf->l_temp_fet_end, &ind);
	buffer_append_float32_auto(buffer, conf->l_temp_motor_start, &ind);
	buffer_append_float32_auto(buffer, conf->l_temp_motor_end, &ind);
	buffer_append_float32_auto(buffer, conf->l_temp_accel_dec, &ind);
	buffer_append_float32_auto(buffer, conf->l_min_duty, &ind);
	buffer_append_float32_auto(buffer, conf->l_max_duty, &ind);
	buffer_append_float32_auto(buffer, conf->l_watt_max, &ind);
	buffer_append_float32_auto(buffer, conf->l_watt_min, &ind);
	buffer_append_float32_auto(buffer, conf->l_current_max_scale, &ind);
	buffer_append_float32_auto(buffer, conf->l_current_min_scale, &ind);
	buffer_append_float32_auto(buffer, conf->sl_min_erpm, &ind);
	buffer_append_float32_auto(buffer, conf->sl_min_erpm_cycle_int_limit, &ind);
	buffer_append_float32_auto(buffer, conf->sl_max_fullbreak_current_dir_change, &ind);
	buffer_append_float32_auto(buffer, conf->sl_cycle_int_limit, &ind);
	buffer_append_float32_auto(buffer, conf->sl_phase_advance_at_br, &ind);
	buffer_append_float32_auto(buffer, conf->sl_cycle_int_rpm_br, &ind);
	buffer_append_float32_auto(buffer, conf->sl_bemf_coupling_k, &ind);
	buffer[ind++] = (uint8_t)conf->hall_table[0];
	buffer[ind++] = (uint8_t)conf->hall_table[1];
	buffer[ind++] = (uint8_t)conf->hall_table[2];
	buffer[ind++] = (uint8_t)conf->hall_table[3];
	buffer[ind++] = (uint8_t)conf->hall_table[4];
	buffer[ind++] = (uint8_t)conf->hall_table[5];
	buffer[ind++] = (uint8_t)conf->hall_table[6];
	buffer[ind++] = (uint8_t)conf->hall_table[7];
	buffer_append_float32_auto(buffer, conf->hall_sl_erpm, &ind);
	buffer_append_float32_auto(buffer, conf->foc_current_kp, &ind);
	buffer_append_float32_auto(buffer, conf->foc_current_ki, &ind);
	buffer_append_float32_auto(buffer, conf->foc_f_sw, &ind);
	buffer_append_float32_auto(buffer, conf->foc_dt_us, &ind);
	buffer[ind++] = conf->foc_encoder_inverted;
	buffer_append_float32_auto(buffer, conf->foc_encoder_offset, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_ratio, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_sin_gain, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_cos_gain, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_sin_offset, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_cos_offset, &ind);
	buffer_append_float32_auto(buffer, conf->foc_encoder_sincos_filter_constant, &ind);
	buffer[ind++] = conf->foc_sensor_mode;
	buffer_append_float32_auto(buffer, conf->foc_pll_kp, &ind);
	buffer_append_float32_auto(buffer, conf->foc_pll_ki, &ind);
	buffer_append_float32_auto(buffer, conf->foc_motor_l, &ind);
	buffer_append_float32_auto(buffer, conf->foc_motor_r, &ind);
	buffer_append_float32_auto(buffer, conf->foc_motor_flux_linkage, &ind);
	buffer_append_float32_auto(buffer, conf->foc_observer_gain, &ind);
	buffer_append_float32_auto(buffer, conf->foc_observer_gain_slow, &ind);
	buffer_append_float32_auto(buffer, conf->foc_duty_dowmramp_kp, &ind);
	buffer_append_float32_auto(buffer, conf->foc_duty_dowmramp_ki, &ind);
	buffer_append_float32_auto(buffer, conf->foc_openloop_rpm, &ind);
	buffer_append_float32_auto(buffer, conf->foc_sl_openloop_hyst, &ind);
	buffer_append_float32_auto(buffer, conf->foc_sl_openloop_time, &ind);
	buffer_append_float32_auto(buffer, conf->foc_sl_d_current_duty, &ind);
	buffer_append_float32_auto(buffer, conf->foc_sl_d_current_factor, &ind);
	buffer[ind++] = (uint8_t)conf->foc_hall_table[0];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[1];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[2];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[3];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[4];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[5];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[6];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[7];
	buffer_append_float32_auto(buffer, conf->foc_sl_erpm, &ind);
	buffer[ind++] = conf->foc_sample_v0_v7;
	buffer[ind++] = conf->foc_sample_high_current;
	buffer_append_float32_auto(buffer, conf->foc_sat_comp, &ind);
	buffer[ind++] = conf->foc_temp_comp;
	buffer_append_float32_auto(buffer, conf->foc_temp_comp_base_temp, &ind);
	buffer_append_float32_auto(buffer, conf->foc_current_filter_const, &ind);
	buffer[ind++] = conf->foc_cc_decoupling;
	buffer[ind++] = conf->foc_observer_type;
	buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_start, &ind);
	buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_run, &ind);
	buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_max, &ind);
	buffer_append_float32_auto(buffer, conf->foc_sl_erpm_hfi, &ind);
	buffer_append_uint16(buffer, conf->foc_hfi_start_samples, &ind);
	buffer_append_float32_auto(buffer, conf->foc_hfi_obs_ovr_sec, &ind);
	buffer[ind++] = conf->foc_hfi_samples;
	buffer_append_int16(buffer, conf->gpd_buffer_notify_left, &ind);
	buffer_append_int16(buffer, conf->gpd_buffer_interpol, &ind);
	buffer_append_float32_auto(buffer, conf->gpd_current_filter_const, &ind);
	buffer_append_float32_auto(buffer, conf->gpd_current_kp, &ind);
	buffer_append_float32_auto(buffer, conf->gpd_current_ki, &ind);
	buffer_append_float32_auto(buffer, conf->s_pid_kp, &ind);
	buffer_append_float32_auto(buffer, conf->s_pid_ki, &ind);
	buffer_append_float32_auto(buffer, conf->s_pid_kd, &ind);
	buffer_append_float32_auto(buffer, conf->s_pid_kd_filter, &ind);
	buffer_append_float32_auto(buffer, conf->s_pid_min_erpm, &ind);
	buffer[ind++] = conf->s_pid_allow_braking;
	buffer_append_float32_auto(buffer, conf->p_pid_kp, &ind);
	buffer_append_float32_auto(buffer, conf->p_pid_ki, &ind);
	buffer_append_float32_auto(buffer, conf->p_pid_kd, &ind);
	buffer_append_float32_auto(buffer, conf->p_pid_kd_filter, &ind);
	buffer_append_float32_auto(buffer, conf->p_pid_ang_div, &ind);
	buffer_append_float32_auto(buffer, conf->cc_startup_boost_duty, &ind);
	buffer_append_float32_auto(buffer, conf->cc_min_current, &ind);
	buffer_append_float32_auto(buffer, conf->cc_gain, &ind);
	buffer_append_float32_auto(buffer, conf->cc_ramp_step_max, &ind);
	buffer_append_int32(buffer, conf->m_fault_stop_time_ms, &ind);
	buffer_append_float32_auto(buffer, conf->m_duty_ramp_step, &ind);
	buffer_append_float32_auto(buffer, conf->m_current_backoff_gain, &ind);
	buffer_append_uint32(buffer, conf->m_encoder_counts, &ind);
	buffer[ind++] = conf->m_sensor_port_mode;
	buffer[ind++] = conf->m_invert_direction;
	buffer[ind++] = conf->m_drv8301_oc_mode;
	buffer[ind++] = (uint8_t)conf->m_drv8301_oc_adj;
	buffer_append_float32_auto(buffer, conf->m_bldc_f_sw_min, &ind);
	buffer_append_float32_auto(buffer, conf->m_bldc_f_sw_max, &ind);
	buffer_append_float32_auto(buffer, conf->m_dc_f_sw, &ind);
	buffer_append_float32_auto(buffer, conf->m_ntc_motor_beta, &ind);
	buffer[ind++] = conf->m_out_aux_mode;
	buffer[ind++] = conf->m_motor_temp_sens_type;
	buffer_append_float32_auto(buffer, conf->m_ptc_motor_coeff, &ind);
	buffer[ind++] = (uint8_t)conf->si_motor_poles;
	buffer_append_float32_auto(buffer, conf->si_gear_ratio, &ind);
	buffer_append_float32_auto(buffer, conf->si_wheel_diameter, &ind);
	buffer[ind++] = conf->si_battery_type;
	buffer[ind++] = (uint8_t)conf->si_battery_cells;
	buffer_append_float32_auto(buffer, conf->si_battery_ah, &ind);

	return ind;
}

bool confgenerator_deserialize_mcconf(const uint8_t *buffer, mc_configuration *conf) {
	int32_t ind = 0;

	uint32_t signature = buffer_get_uint32(buffer, &ind);

	conf->pwm_mode = buffer[ind++];
	conf->comm_mode = buffer[ind++];
	conf->motor_type = buffer[ind++];
	conf->sensor_mode = buffer[ind++];
	conf->l_current_max = buffer_get_float32_auto(buffer, &ind);
	conf->l_current_min = buffer_get_float32_auto(buffer, &ind);
	conf->l_in_current_max = buffer_get_float32_auto(buffer, &ind);
	conf->l_in_current_min = buffer_get_float32_auto(buffer, &ind);
	conf->l_abs_current_max = buffer_get_float32_auto(buffer, &ind);
	conf->l_min_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->l_max_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->l_erpm_start = buffer_get_float32_auto(buffer, &ind);
	conf->l_max_erpm_fbrake = buffer_get_float32_auto(buffer, &ind);
	conf->l_max_erpm_fbrake_cc = buffer_get_float32_auto(buffer, &ind);
	conf->l_min_vin = buffer_get_float32_auto(buffer, &ind);
	conf->l_max_vin = buffer_get_float32_auto(buffer, &ind);
	conf->l_battery_cut_start = buffer_get_float32_auto(buffer, &ind);
	conf->l_battery_cut_end = buffer_get_float32_auto(buffer, &ind);
	conf->l_slow_abs_current = buffer[ind++];
	conf->l_temp_fet_start = buffer_get_float32_auto(buffer, &ind);
	conf->l_temp_fet_end = buffer_get_float32_auto(buffer, &ind);
	conf->l_temp_motor_start = buffer_get_float32_auto(buffer, &ind);
	conf->l_temp_motor_end = buffer_get_float32_auto(buffer, &ind);
	conf->l_temp_accel_dec = buffer_get_float32_auto(buffer, &ind);
	conf->l_min_duty = buffer_get_float32_auto(buffer, &ind);
	conf->l_max_duty = buffer_get_float32_auto(buffer, &ind);
	conf->l_watt_max = buffer_get_float32_auto(buffer, &ind);
	conf->l_watt_min = buffer_get_float32_auto(buffer, &ind);
	conf->l_current_max_scale = buffer_get_float32_auto(buffer, &ind);
	conf->l_current_min_scale = buffer_get_float32_auto(buffer, &ind);
	conf->sl_min_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(buffer, &ind);
	conf->sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(buffer, &ind);
	conf->sl_cycle_int_limit = buffer_get_float32_auto(buffer, &ind);
	conf->sl_phase_advance_at_br = buffer_get_float32_auto(buffer, &ind);
	conf->sl_cycle_int_rpm_br = buffer_get_float32_auto(buffer, &ind);
	conf->sl_bemf_coupling_k = buffer_get_float32_auto(buffer, &ind);
	conf->hall_table[0] = (int8_t)buffer[ind++];
	conf->hall_table[1] = (int8_t)buffer[ind++];
	conf->hall_table[2] = (int8_t)buffer[ind++];
	conf->hall_table[3] = (int8_t)buffer[ind++];
	conf->hall_table[4] = (int8_t)buffer[ind++];
	conf->hall_table[5] = (int8_t)buffer[ind++];
	conf->hall_table[6] = (int8_t)buffer[ind++];
	conf->hall_table[7] = (int8_t)buffer[ind++];
	conf->hall_sl_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->foc_current_kp = buffer_get_float32_auto(buffer, &ind);
	conf->foc_current_ki = buffer_get_float32_auto(buffer, &ind);
	conf->foc_f_sw = buffer_get_float32_auto(buffer, &ind);
	conf->foc_dt_us = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_inverted = buffer[ind++];
	conf->foc_encoder_offset = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_ratio = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_sin_gain = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_cos_gain = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_sin_offset = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_cos_offset = buffer_get_float32_auto(buffer, &ind);
	conf->foc_encoder_sincos_filter_constant = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sensor_mode = buffer[ind++];
	conf->foc_pll_kp = buffer_get_float32_auto(buffer, &ind);
	conf->foc_pll_ki = buffer_get_float32_auto(buffer, &ind);
	conf->foc_motor_l = buffer_get_float32_auto(buffer, &ind);
	conf->foc_motor_r = buffer_get_float32_auto(buffer, &ind);
	conf->foc_motor_flux_linkage = buffer_get_float32_auto(buffer, &ind);
	conf->foc_observer_gain = buffer_get_float32_auto(buffer, &ind);
	conf->foc_observer_gain_slow = buffer_get_float32_auto(buffer, &ind);
	conf->foc_duty_dowmramp_kp = buffer_get_float32_auto(buffer, &ind);
	conf->foc_duty_dowmramp_ki = buffer_get_float32_auto(buffer, &ind);
	conf->foc_openloop_rpm = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sl_openloop_hyst = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sl_openloop_time = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sl_d_current_duty = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sl_d_current_factor = buffer_get_float32_auto(buffer, &ind);
	conf->foc_hall_table[0] = buffer[ind++];
	conf->foc_hall_table[1] = buffer[ind++];
	conf->foc_hall_table[2] = buffer[ind++];
	conf->foc_hall_table[3] = buffer[ind++];
	conf->foc_hall_table[4] = buffer[ind++];
	conf->foc_hall_table[5] = buffer[ind++];
	conf->foc_hall_table[6] = buffer[ind++];
	conf->foc_hall_table[7] = buffer[ind++];
	conf->foc_sl_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sample_v0_v7 = buffer[ind++];
	conf->foc_sample_high_current = buffer[ind++];
	conf->foc_sat_comp = buffer_get_float32_auto(buffer, &ind);
	conf->foc_temp_comp = buffer[ind++];
	conf->foc_temp_comp_base_temp = buffer_get_float32_auto(buffer, &ind);
	conf->foc_current_filter_const = buffer_get_float32_auto(buffer, &ind);
	conf->foc_cc_decoupling = buffer[ind++];
	conf->foc_observer_type = buffer[ind++];
	conf->foc_hfi_voltage_start = buffer_get_float32_auto(buffer, &ind);
	conf->foc_hfi_voltage_run = buffer_get_float32_auto(buffer, &ind);
	conf->foc_hfi_voltage_max = buffer_get_float32_auto(buffer, &ind);
	conf->foc_sl_erpm_hfi = buffer_get_float32_auto(buffer, &ind);
	conf->foc_hfi_start_samples = buffer_get_uint16(buffer, &ind);
	conf->foc_hfi_obs_ovr_sec = buffer_get_float32_auto(buffer, &ind);
	conf->foc_hfi_samples = buffer[ind++];
	conf->gpd_buffer_notify_left = buffer_get_int16(buffer, &ind);
	conf->gpd_buffer_interpol = buffer_get_int16(buffer, &ind);
	conf->gpd_current_filter_const = buffer_get_float32_auto(buffer, &ind);
	conf->gpd_current_kp = buffer_get_float32_auto(buffer, &ind);
	conf->gpd_current_ki = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_kp = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_ki = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_kd = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_kd_filter = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_min_erpm = buffer_get_float32_auto(buffer, &ind);
	conf->s_pid_allow_braking = buffer[ind++];
	conf->p_pid_kp = buffer_get_float32_auto(buffer, &ind);
	conf->p_pid_ki = buffer_get_float32_auto(buffer, &ind);
	conf->p_pid_kd = buffer_get_float32_auto(buffer, &ind);
	conf->p_pid_kd_filter = buffer_get_float32_auto(buffer, &ind);
	conf->p_pid_ang_div = buffer_get_float32_auto(buffer, &ind);
	conf->cc_startup_boost_duty = buffer_get_float32_auto(buffer, &ind);
	conf->cc_min_current = buffer_get_float32_auto(buffer, &ind);
	conf->cc_gain = buffer_get_float32_auto(buffer, &ind);
	conf->cc_ramp_step_max = buffer_get_float32_auto(buffer, &ind);
	conf->m_fault_stop_time_ms = buffer_get_int32(buffer, &ind);
	conf->m_duty_ramp_step = buffer_get_float32_auto(buffer, &ind);
	conf->m_current_backoff_gain = buffer_get_float32_auto(buffer, &ind);
	conf->m_encoder_counts = buffer_get_uint32(buffer, &ind);
	conf->m_sensor_port_mode = buffer[ind++];
	conf->m_invert_direction = buffer[ind++];
	conf->m_drv8301_oc_mode = buffer[ind++];
	conf->m_drv8301_oc_adj = buffer[ind++];
	conf->m_bldc_f_sw_min = buffer_get_float32_auto(buffer, &ind);
	conf->m_bldc_f_sw_max = buffer_get_float32_auto(buffer, &ind);
	conf->m_dc_f_sw = buffer_get_float32_auto(buffer, &ind);
	conf->m_ntc_motor_beta = buffer_get_float32_auto(buffer, &ind);
	conf->m_out_aux_mode = buffer[ind++];
	conf->m_motor_temp_sens_type = buffer[ind++];
	conf->m_ptc_motor_coeff = buffer_get_float32_auto(buffer, &ind);
	conf->si_motor_poles = buffer[ind++];
	conf->si_gear_ratio = buffer_get_float32_auto(buffer, &ind);
	conf->si_wheel_diameter = buffer_get_float32_auto(buffer, &ind);
	conf->si_battery_type = buffer[ind++];
	conf->si_battery_cells = buffer[ind++];
	conf->si_battery_ah = buffer_get_float32_auto(buffer, &ind);

	return true;
}